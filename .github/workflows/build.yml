name: Build and Release
on:
  push:
    tags: ["v*"] # déclenché par un tag v1.2.3, v0.0.2-test, etc.
  workflow_dispatch: # ou exécution manuelle

env:
  PROJECT_PATH: ./ # racine du projet Unity
  BUILD_NAME: LysandraGame

jobs:
  # ────────────────────────────────────
  build:
    name: Build ${{ matrix.targetPlatform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # ← ajoute ici d'autres plateformes dans le futur
          - os: windows-2022
            unityVersion: 6000.0.38f1
            targetPlatform: StandaloneWindows64
    steps:
      - uses: actions/checkout@v4 # :contentReference[oaicite:1]{index=1}

      # Cache du dossier Library (Game-CI recommande de le faire) :contentReference[oaicite:2]{index=2}
      - uses: actions/cache@v3
        with:
          path: ${{ env.PROJECT_PATH }}/Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('**/*.cs') }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-
            Library-

      # Build Unity (Game-CI) :contentReference[oaicite:3]{index=3}
      - name: Build ${{ matrix.targetPlatform }}
        uses: game-ci/unity-builder@v4
        with:
          unityVersion: ${{ matrix.unityVersion }}
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: ${{ matrix.targetPlatform }}
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

      # Upload artefact avec v4 :contentReference[oaicite:4]{index=4}
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  # ────────────────────────────────────
  release:
    name: Package & Release
    needs: build # attend que TOUTES les matrices « build » soient finies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ↓↓ pour l'instant on ne télécharge que le build Windows ; si tu ajoutes d’autres OS,
      #    répète ou boucle sur download-artifact以 adapter.
      - name: Download Windows build
        uses: actions/download-artifact@v4 # :contentReference[oaicite:5]{index=5}
        with:
          name: build-StandaloneWindows64
          path: ./build/windows

      # Zip avec 7-Zip (installé sur l’image ubuntu-latest)
      - name: Zip Windows build
        run: |
          cd build/windows
          7z a -tzip $GITHUB_WORKSPACE/game-${{ github.ref_name }}-windows.zip .

      # SHA-256 du ZIP
      - name: Compute SHA-256
        id: sha
        run: |
          echo "checksum=$(sha256sum game-${{ github.ref_name }}-windows.zip | awk '{print $1}')" >> $GITHUB_OUTPUT

      # Génère latest.json
      - name: Create latest.json
        run: |
          cat > latest.json <<EOF
          {
            "version": "${{ github.ref_name }}",
            "zip": {
              "url": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/game-${{ github.ref_name }}-windows.zip",
              "sha256": "${{ steps.sha.outputs.checksum }}"
            }
          }
          EOF

        # Crée la Release      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: "🚀 Nouvelle version ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Upload ZIP et manifeste
      - name: Upload game ZIP
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: game-${{ github.ref_name }}-windows.zip
          asset_name: game-${{ github.ref_name }}-windows.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload manifest
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: latest.json
          asset_name: latest.json
          asset_content_type: application/json
        env:
          GITHUB_TOKEN: ${{ github.token }}
